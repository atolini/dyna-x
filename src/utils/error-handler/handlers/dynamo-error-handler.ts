import {
  ConditionalCheckFailedException,
  ProvisionedThroughputExceededException,
  RequestLimitExceeded,
  ItemCollectionSizeLimitExceededException,
  InternalServerError,
  LimitExceededException
} from "@aws-sdk/client-dynamodb";
import { ErrorActions } from "../error-actions";
import { Logger } from "@aws-lambda-powertools/logger";
import { IResponseBuilder } from "@response-builder/i-response-builder";

/**
 * Class responsible for handling errors related to DynamoDB, specifically retryable errors.
 * Implements the `ErrorActions` interface and checks if an error is one of the known DynamoDB errors.
 * If the error can be handled, it logs detailed information and returns an appropriate response.
 * If the error cannot be handled, a generic error response is returned.
 * 
 * @template T - The type of the response returned by the handler (e.g., API response type).
 * @template R - The response builder type that implements the `IApiResponse<T>` interface.
 */
export class DynamoErrorHandler<T, R extends IResponseBuilder<T>> implements ErrorActions<T, R> {
  private readonly retryableErrors = new Set([
    ProvisionedThroughputExceededException,
    RequestLimitExceeded,
    ConditionalCheckFailedException,
    ItemCollectionSizeLimitExceededException,
    InternalServerError,
    LimitExceededException
  ]);

  /**
   * Checks if the given error is one of the retryable DynamoDB errors.
   * 
   * @param error - The error to be checked.
   * @returns `true` if the error is a known DynamoDB error, otherwise `false`.
   */
  canHandle(error: Error): boolean {
    return Array
      .from(this.retryableErrors)
      .some((errorType) => error instanceof errorType);
  }

  /**
   * Handles the given error by logging details about the error and returning an appropriate response.
   * The response will indicate the type of DynamoDB error that occurred.
   * 
   * @param error - The error to be handled.
   * @param logger - Logger instance for logging error details.
   * @param resBuilder - The response builder used to create the error response.
   * @returns A response generated by the response builder, typically indicating an internal server error.
   */
  handle(
    error: Error,
    logger: Logger,
    resBuilder: R
  ): T {
    // Handling ProvisionedThroughputExceededException error
    if (error instanceof ProvisionedThroughputExceededException) {
      logger.error("DynamoDB throughput exceeded", {
        error: error.name,
        message: error.message,
        details: "The request rate is too high for the provisioned capacity. Consider increasing RCPU/WCPU or using adaptive capacity.",
      });
      return resBuilder.internalError("DynamoDB throughput exceeded") as T;
    }

    // Handling RequestLimitExceeded error
    else if (error instanceof RequestLimitExceeded) {
      logger.error("DynamoDB request limit exceeded", {
        error: error.name,
        message: error.message,
        details: "Too many concurrent requests to DynamoDB.",
      });
      return resBuilder.internalError("DynamoDB request limit exceeded") as T;
    }

    // Handling ConditionalCheckFailedException error
    else if (error instanceof ConditionalCheckFailedException) {
      logger.warn("DynamoDB conditional check failed", {
        error: error.name,
        message: error.message,
        details: "The conditional update/delete operation failed because conditions were not met.",
      });
      return resBuilder.badRequest("DynamoDB conditional check failed") as T;
    }

    // Handling ItemCollectionSizeLimitExceededException error
    else if (error instanceof ItemCollectionSizeLimitExceededException) {
      logger.error("DynamoDB item collection size limit exceeded", {
        error: error.name,
        message: error.message,
        details: "The item collection (table + LSI/GSI) exceeded the 10GB limit per partition key.",
      });
      return resBuilder.internalError("DynamoDB item collection size limit exceeded") as T;
    }

    // Handling InternalServerError error
    else if (error instanceof InternalServerError) {
      logger.error("DynamoDB internal server error", {
        error: error.name,
        message: error.message,
        details: "A temporary server-side issue occurred.",
      });
      return resBuilder.internalError("DynamoDB internal server error") as T;
    }

    // Handling LimitExceededException error
    else if (error instanceof LimitExceededException) {
      logger.error("DynamoDB service limit exceeded", {
        error: error.name,
        message: error.message,
        details: "Exceeded AWS account/table limits (e.g., maximum tables, indexes).",
      });
      return resBuilder.internalError("DynamoDB service limit exceeded") as T;
    }
  }
}
